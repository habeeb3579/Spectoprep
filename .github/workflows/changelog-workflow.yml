name: 📝 Generate CHANGELOG

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to generate CHANGELOG for'
        required: true
        default: ''
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  generate-changelog:
    # Only run this workflow when manually triggered or when a PR is merged (and not labeled with 'no-changelog')
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no-changelog'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install gitpython pyyaml

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from the PR title or merged branch if it contains a version pattern
            PR_TITLE="${{ github.event.pull_request.title }}"
            if [[ "$PR_TITLE" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              VERSION=${BASH_REMATCH[0]}
              # Remove 'v' prefix if present
              VERSION=${VERSION#v}
            elif [[ "$PR_TITLE" =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
              VERSION=${BASH_REMATCH[0]}
            else
              # Default to current date as version if no version found
              VERSION="$(date +'%Y.%m.%d')"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate CHANGELOG
        id: changelog
        run: |
          CHANGELOG_FILE="CHANGELOG.rst"
          TEMP_CHANGELOG="temp_changelog.rst"
          
          # Create empty file if it doesn't exist
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "Changelog" > "$CHANGELOG_FILE"
            echo "=========" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "All notable changes to this project will be documented in this file." >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi
          
          # Normalize version by removing 'v' prefix if present
          NORMALIZED_VERSION="${{ env.VERSION }}"
          NORMALIZED_VERSION=${NORMALIZED_VERSION#v}
          
          # Check if version already exists in CHANGELOG (check both with and without 'v' prefix)
          VERSION_EXISTS=$(grep -c "$NORMALIZED_VERSION - " "$CHANGELOG_FILE" || echo "0")
          if [ "$VERSION_EXISTS" != "0" ]; then
            echo "Version $NORMALIZED_VERSION already exists in CHANGELOG. Will update it."
          fi
          
          # Get the latest tag or commit before this PR
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PRs, get commits in the PR
            COMMITS=$(git log ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --pretty=format:"* %s (%h)" --reverse)
          elif [ "$VERSION_EXISTS" == "0" ]; then
            # For new versions via workflow_dispatch, get commits since latest tag
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            if [ -z "$LATEST_TAG" ]; then
              echo "No previous tag found. Including all commits."
              # Get commits since repository creation
              COMMITS=$(git log --pretty=format:"* %s (%h)" --reverse)
            else
              echo "Previous tag found: $LATEST_TAG"
              # Get commits since last tag
              COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"* %s (%h)" --reverse)
            fi
          else
            # If updating an existing version, keep existing content
            echo "Will update existing version section without changing commits."
            COMMITS=""
          fi
          
          if [ -z "$COMMITS" ] && [ "$VERSION_EXISTS" == "0" ]; then
            echo "No new commits found since last tag and no existing version to update."
            exit 0
          fi
          
          # Create CHANGELOG header for temp file
          echo "Changelog" > "$TEMP_CHANGELOG"
          echo "=========" >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          echo "All notable changes to this project will be documented in this file." >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          
          # Handle the case where version already exists
          if [ "$VERSION_EXISTS" != "0" ]; then
            # Read the existing CHANGELOG and replace the temp file with everything up to the version header
            SECTION_HEADER="$NORMALIZED_VERSION - "
            CHANGELOG_CONTENT=$(cat "$CHANGELOG_FILE")
            
            # Find line number of the version header
            SECTION_START=$(echo "$CHANGELOG_CONTENT" | grep -n "$SECTION_HEADER" | cut -d: -f1)
            
            # Copy everything before the version section to temp file
            if [ ! -z "$SECTION_START" ]; then
              BEFORE_SECTION=$((SECTION_START - 1))
              head -n $BEFORE_SECTION "$CHANGELOG_FILE" > "$TEMP_CHANGELOG"
            fi
            
            # Add version section header (RST format)
            echo "$NORMALIZED_VERSION - $(date +'%Y-%m-%d')" >> "$TEMP_CHANGELOG"
            echo "$(printf '%*s' ${#NORMALIZED_VERSION} | tr ' ' '-')$(printf '%*s' 11 | tr ' ' '-')" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
            
            # For manually triggered updates with empty commits, copy existing section content
            if [ -z "$COMMITS" ]; then
              # Find next section to determine where current section ends
              NEXT_SECTION_PATTERN="[0-9]"
              NEXT_SECTION_START=$(tail -n +$SECTION_START "$CHANGELOG_FILE" | grep -n "^$NEXT_SECTION_PATTERN" | head -n 2 | tail -n 1 | cut -d: -f1)
              
              if [ -z "$NEXT_SECTION_START" ]; then
                # If no next section, skip copying section content and continue with the rest of the file below
                echo "No next section found. Will regenerate this section."
              else
                # Calculate end of current section
                SECTION_END=$((SECTION_START + NEXT_SECTION_START - 2))
                # Copy section content without header and underline
                sed -n "$((SECTION_START + 2)),$SECTION_END p" "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"
                echo "" >> "$TEMP_CHANGELOG"
                
                # Copy the rest of the changelog starting from next section
                tail -n +$((SECTION_END + 1)) "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"
                
                # Move temp file to changelog and exit
                mv "$TEMP_CHANGELOG" "$CHANGELOG_FILE"
                echo "::set-output name=file::$CHANGELOG_FILE"
                exit 0
              fi
            fi
          else
            # Add new version section header (RST format)
            echo "$NORMALIZED_VERSION - $(date +'%Y-%m-%d')" >> "$TEMP_CHANGELOG"
            echo "$(printf '%*s' ${#NORMALIZED_VERSION} | tr ' ' '-')$(printf '%*s' 11 | tr ' ' '-')" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Categorize commits by conventional commit types
          FEATURES=$(echo "$COMMITS" | grep -i "feat" | head -n 5 || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "fix" | head -n 5 || echo "")
          DOCS=$(echo "$COMMITS" | grep -i "doc" | head -n 3 || echo "")
          TESTS=$(echo "$COMMITS" | grep -i "test" | head -n 3 || echo "")
          REFACTOR=$(echo "$COMMITS" | grep -i "refactor" | head -n 3 || echo "")
          CHORE=$(echo "$COMMITS" | grep -i "chore" | head -n 3 || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i "feat\|fix\|doc\|test\|refactor\|chore" | head -n 3 || echo "")
          
          # Add features
          if [ ! -z "$FEATURES" ]; then
            echo "Features" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$FEATURES" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add fixes
          if [ ! -z "$FIXES" ]; then
            echo "Bug Fixes" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$FIXES" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add docs
          if [ ! -z "$DOCS" ]; then
            echo "Documentation" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$DOCS" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add tests
          if [ ! -z "$TESTS" ]; then
            echo "Tests" >> "$TEMP_CHANGELOG"
            echo "~~~~~" >> "$TEMP_CHANGELOG"
            echo "$TESTS" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add refactoring
          if [ ! -z "$REFACTOR" ]; then
            echo "Refactoring" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$REFACTOR" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add chore
          if [ ! -z "$CHORE" ]; then
            echo "Chore" >> "$TEMP_CHANGELOG"
            echo "~~~~~" >> "$TEMP_CHANGELOG"
            echo "$CHORE" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add other changes
          if [ ! -z "$OTHER" ]; then
            echo "Other Changes" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$OTHER" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # If we're updating an existing version, copy content after this version section
          if [ "$VERSION_EXISTS" != "0" ]; then
            # Find next section to determine where to continue copying
            NEXT_SECTION_START=$(tail -n +$SECTION_START "$CHANGELOG_FILE" | grep -n "^[0-9]" | head -n 2 | tail -n 1 | cut -d: -f1)
            
            if [ -z "$NEXT_SECTION_START" ]; then
              # If no next section, we're done
              echo "No next section found. Updated CHANGELOG."
            else
              # Calculate where next section begins in original file
              NEXT_START=$((SECTION_START + NEXT_SECTION_START - 1))
              # Copy everything after the current section
              tail -n +$NEXT_START "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"
            fi
          else
            # For new versions, append existing changelog content (excluding header)
            tail -n +5 "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"
          fi
          
          # Replace the old changelog
          mv "$TEMP_CHANGELOG" "$CHANGELOG_FILE"
          
          # Set changelog content for use in PR description or release notes
          CHANGELOG_CONTENT=$(cat "$CHANGELOG_FILE" | head -n 20)
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "::set-output name=file::$CHANGELOG_FILE"

      - name: Create Pull Request for CHANGELOG
        if: github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: "docs: update CHANGELOG for version ${{ env.VERSION }}"
          title: "Update CHANGELOG for version ${{ env.VERSION }}"
          body: |
            This PR updates the CHANGELOG for version ${{ env.VERSION }}.
            
            ## Preview
            ```
            ${{ env.changelog }}
            ```
          branch: update-changelog-${{ env.VERSION }}
          base: ${{ github.event.repository.default_branch }}
          labels: documentation

      - name: Update PR with CHANGELOG
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('${{ steps.changelog.outputs.file }}', 'utf8');
            const prNumber = context.payload.pull_request.number;
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              body: `${context.payload.pull_request.body}\n\n## Changelog Preview\n\`\`\`\n${changelog.substring(0, 1000)}...\n\`\`\``
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## CHANGELOG updated\n\nThe CHANGELOG has been updated for version ${{ env.VERSION }}.\n\nPreview:\n\`\`\`\n${changelog.substring(0, 1000)}...\n\`\`\``
            });

      - name: Commit CHANGELOG
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.rst
          git commit -m "docs: update CHANGELOG for version ${{ env.VERSION }}" || echo "No changes to commit"
          git push