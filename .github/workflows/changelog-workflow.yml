name: Generate CHANGELOG

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to generate CHANGELOG for'
        required: true
        default: ''
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  generate-changelog:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && !contains(github.event.pull_request.labels.*.name, 'no-changelog'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install gitpython pyyaml

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from the PR title or merged branch if it contains a version pattern
            PR_TITLE="${{ github.event.pull_request.title }}"
            if [[ "$PR_TITLE" =~ v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              VERSION=${BASH_REMATCH[0]}
            elif [[ "$PR_TITLE" =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
              VERSION=${BASH_REMATCH[0]}
            else
              # Default to current date as version if no version found
              VERSION="$(date +'%Y.%m.%d')"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate CHANGELOG
        id: changelog
        run: |
          CHANGELOG_FILE="CHANGELOG.md"
          TEMP_CHANGELOG="temp_changelog.md"
          
          # Create empty file if it doesn't exist
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "# Changelog" > "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "All notable changes to this project will be documented in this file." >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi
          
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # If no tag exists, get all commits
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tag found. Including all commits."
            # Get commits since repository creation
            COMMITS=$(git log --pretty=format:"* %s (%h)" --reverse)
          else
            echo "Previous tag found: $LATEST_TAG"
            # Get commits since last tag
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"* %s (%h)" --reverse)
          fi
          
          if [ -z "$COMMITS" ]; then
            echo "No new commits found since $LATEST_TAG"
            exit 0
          fi
          
          # Create CHANGELOG header for new version
          echo "# Changelog" > "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          echo "All notable changes to this project will be documented in this file." >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          
          # Add new version section
          echo "## [${VERSION}] - $(date +'%Y-%m-%d')" >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          
          # Categorize commits by conventional commit types
          FEATURES=$(echo "$COMMITS" | grep -i "feat" || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "fix" || echo "")
          DOCS=$(echo "$COMMITS" | grep -i "doc" || echo "")
          TESTS=$(echo "$COMMITS" | grep -i "test" || echo "")
          REFACTOR=$(echo "$COMMITS" | grep -i "refactor" || echo "")
          CHORE=$(echo "$COMMITS" | grep -i "chore" || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i "feat\|fix\|doc\|test\|refactor\|chore" || echo "")
          
          # Add features
          if [ ! -z "$FEATURES" ]; then
            echo "### Features" >> "$TEMP_CHANGELOG"
            echo "$FEATURES" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add fixes
          if [ ! -z "$FIXES" ]; then
            echo "### Bug Fixes" >> "$TEMP_CHANGELOG"
            echo "$FIXES" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add docs
          if [ ! -z "$DOCS" ]; then
            echo "### Documentation" >> "$TEMP_CHANGELOG"
            echo "$DOCS" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add tests
          if [ ! -z "$TESTS" ]; then
            echo "### Tests" >> "$TEMP_CHANGELOG"
            echo "$TESTS" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add refactoring
          if [ ! -z "$REFACTOR" ]; then
            echo "### Refactoring" >> "$TEMP_CHANGELOG"
            echo "$REFACTOR" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add chore
          if [ ! -z "$CHORE" ]; then
            echo "### Chore" >> "$TEMP_CHANGELOG"
            echo "$CHORE" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Add other changes
          if [ ! -z "$OTHER" ]; then
            echo "### Other Changes" >> "$TEMP_CHANGELOG"
            echo "$OTHER" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          # Append existing changelog content (excluding header)
          tail -n +4 "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"
          
          # Replace the old changelog
          mv "$TEMP_CHANGELOG" "$CHANGELOG_FILE"
          
          # Set changelog content for use in PR description or release notes
          CHANGELOG_CONTENT=$(cat "$CHANGELOG_FILE" | head -n 20)
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "::set-output name=file::$CHANGELOG_FILE"

      - name: Create Pull Request for CHANGELOG
        if: github.event_name == 'workflow_dispatch'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update CHANGELOG for version ${{ env.VERSION }}"
          title: "Update CHANGELOG for version ${{ env.VERSION }}"
          body: |
            This PR updates the CHANGELOG for version ${{ env.VERSION }}.
            
            ## Preview
            ```
            ${{ env.changelog }}
            ```
          branch: update-changelog-${{ env.VERSION }}
          base: ${{ github.event.repository.default_branch }}
          labels: documentation

      - name: Update PR with CHANGELOG
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('${{ steps.changelog.outputs.file }}', 'utf8');
            const prNumber = context.payload.pull_request.number;
            
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              body: `${context.payload.pull_request.body}\n\n## Changelog Preview\n\`\`\`markdown\n${changelog.substring(0, 1500)}...\n\`\`\``
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## CHANGELOG updated\n\nThe CHANGELOG has been updated for version ${{ env.VERSION }}.\n\nPreview:\n\`\`\`markdown\n${changelog.substring(0, 1500)}...\n\`\`\``
            });

      - name: Commit CHANGELOG
        if: github.event_name == 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: update CHANGELOG for version ${{ env.VERSION }}" || echo "No changes to commit"
          git push