name: ðŸš€ Create GitHub Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string
      run_wait:
        description: 'Run wait-for-builds job?'
        required: false
        default: 'true'
        type: choice
        options:
          - true
          - false
      wait_time:
        description: 'Wait time in minutes'
        required: false
        default: '10'
        type: string

permissions:
  contents: write

jobs:

  wait-for-builds:
    if: ${{ github.event.inputs.run_wait == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Sleep for package builds
        run: |
          WAIT_TIME="${{ github.event.inputs.wait_time }}"
          if ! [[ "$WAIT_TIME" =~ ^[0-9]+$ ]]; then
            echo "Invalid wait_time input: $WAIT_TIME"
            exit 1
          fi
          SECONDS_TO_SLEEP=$((WAIT_TIME * 60))
          echo "Sleeping for $SECONDS_TO_SLEEP seconds..."
          sleep "$SECONDS_TO_SLEEP"

  update-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install gitpython pyyaml

      - name: Extract version from ref
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.release_tag }}"
            # Remove 'v' prefix if present
            VERSION=${VERSION#v}
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi

          if [ -z "$VERSION" ]; then
            echo "::error::No version found. Cannot proceed."
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if version already exists in CHANGELOG
        id: check_version
        run: |
          CHANGELOG_FILE="CHANGELOG.rst"
          
          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this version already exists in the changelog
          if grep -q "^${{ env.VERSION }} - " "$CHANGELOG_FILE"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate CHANGELOG
        if: steps.check_version.outputs.exists == 'false'
        run: |
          CHANGELOG_FILE="CHANGELOG.rst"
          TEMP_CHANGELOG="temp_changelog.rst"

          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "Changelog" > "$CHANGELOG_FILE"
            echo "=========" >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
            echo "All notable changes to this project will be documented here." >> "$CHANGELOG_FILE"
            echo "" >> "$CHANGELOG_FILE"
          fi

          LATEST_TAG=$(git describe --tags --abbrev=0 "v${{ env.VERSION }}"^ 2>/dev/null || echo "")

          if [ -z "$LATEST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"* %s (%h)" --reverse | head -n 15)
          else
            COMMITS=$(git log "$LATEST_TAG"..v${{ env.VERSION }} --pretty=format:"* %s (%h)" --reverse | head -n 15)
          fi

          if [ -z "$COMMITS" ]; then
            echo "::notice::No new commits found. Using placeholder for CHANGELOG."
            COMMITS="* Released version ${{ env.VERSION }}"
          fi

          echo "Changelog" > "$TEMP_CHANGELOG"
          echo "=========" >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          echo "All notable changes to this project will be documented here." >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          
          # Add version section header (RST format)
          echo "${{ env.VERSION }} - $(date +'%Y-%m-%d')" >> "$TEMP_CHANGELOG"
          echo "$(printf '%*s' ${#VERSION} | tr ' ' '-')$(printf '%*s' 11 | tr ' ' '-')" >> "$TEMP_CHANGELOG"
          echo "" >> "$TEMP_CHANGELOG"
          
          # Categorize commits
          FEATURES=$(echo "$COMMITS" | grep -i "feat" | head -n 5 || echo "")
          FIXES=$(echo "$COMMITS" | grep -i "fix" | head -n 5 || echo "")
          OTHER=$(echo "$COMMITS" | grep -v -i "feat\|fix" | head -n 5 || echo "")
          
          # Add concise categorized changes (only main categories for release notes)
          if [ ! -z "$FEATURES" ]; then
            echo "Features" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$FEATURES" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          if [ ! -z "$FIXES" ]; then
            echo "Bug Fixes" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$FIXES" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi
          
          if [ ! -z "$OTHER" ]; then
            echo "Other Changes" >> "$TEMP_CHANGELOG"
            echo "~~~~~~~~~~~~~" >> "$TEMP_CHANGELOG"
            echo "$OTHER" >> "$TEMP_CHANGELOG"
            echo "" >> "$TEMP_CHANGELOG"
          fi

          # Copy existing changelog content (excluding header)
          tail -n +5 "$CHANGELOG_FILE" >> "$TEMP_CHANGELOG"
          mv "$TEMP_CHANGELOG" "$CHANGELOG_FILE"

      - name: Commit and push CHANGELOG
        if: steps.check_version.outputs.exists == 'false'
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git add CHANGELOG.rst
          git commit -m "docs: update CHANGELOG for version ${{ env.VERSION }}" || echo "No changes to commit"
          git push

  create-release:
    needs: [wait-for-builds, update-changelog]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve version and tag
        id: resolve_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TAG="${{ github.event.inputs.release_tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          if [ -z "$TAG" ]; then
            echo "::error::No tag found. Exiting."
            exit 1
          fi

          VERSION="${TAG#v}"

          echo "Resolved TAG: $TAG"
          echo "Resolved VERSION: $VERSION"

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download PyPI artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: python-package-deployment.yml
          name: python-package-distributions
          path: dist/
          if_no_artifact_found: warn

      - name: Download Conda artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: python-package-deployment.yml
          name: conda-package-distributions
          path: conda-dist/
          if_no_artifact_found: warn

      - name: Prepare release files
        run: |
          echo "Preparing release files..."
          
          mkdir -p release-files

          # Copy PyPI distribution files if they exist
          if [ -d "dist" ] && [ "$(ls -A dist 2>/dev/null)" ]; then
            echo "Copying PyPI distribution files..."
            cp -r dist/* release-files/
          else
            echo "No PyPI artifacts found to copy."
          fi

          # Copy Conda distribution files if they exist
          if [ -d "conda-dist" ] && [ "$(ls -A conda-dist 2>/dev/null)" ]; then
            echo "Copying Conda distribution files..."
            find conda-dist -name "*.tar.bz2" -o -name "*.conda" -exec cp {} release-files/ \;
          else
            echo "No Conda artifacts found to copy."
          fi

          # Copy LICENSE file if it exists
          if [ -f "LICENSE" ]; then
            echo "Copying LICENSE..."
            cp LICENSE release-files/
          else
            echo "LICENSE file not found. Skipping."
          fi

          # Copy README files if available
          if [ -f "README.md" ]; then
            echo "Copying README.md..."
            cp README.md release-files/
          elif [ -f "README.rst" ]; then
            echo "Copying README.rst..."
            cp README.rst release-files/
          else
            echo "No README file found. Skipping."
          fi

          echo "Release files prepared successfully."

      - name: Generate Release Notes
        run: |
          CHANGELOG_FILE="CHANGELOG.rst"

          if [ ! -f "$CHANGELOG_FILE" ]; then
            echo "::warning::CHANGELOG not found. Using simple notes."
            RELEASE_NOTES="Release ${{ env.VERSION }}"
          else
            SECTION_HEADER="^${{ env.VERSION }} - "
            NEXT_SECTION_PATTERN="^[0-9]"

            SECTION_START=$(grep -n "$SECTION_HEADER" "$CHANGELOG_FILE" | cut -d: -f1 || echo "")
            if [ -z "$SECTION_START" ]; then
              RELEASE_NOTES="Release ${{ env.VERSION }}"
            else
              # Skip the section header line and its underline
              CONTENT_START=$((SECTION_START + 2))
              
              # Find next version section to determine where to stop
              NEXT_SECTION_START=$(tail -n +$CONTENT_START "$CHANGELOG_FILE" | grep -n "$NEXT_SECTION_PATTERN" | head -n 1 | cut -d: -f1 || echo "")
              
              if [ -z "$NEXT_SECTION_START" ]; then
                # No next section found, extract to end of file
                RELEASE_NOTES=$(tail -n +$CONTENT_START "$CHANGELOG_FILE" | head -n 50)
              else
                # Calculate end position
                SECTION_END=$((CONTENT_START + NEXT_SECTION_START - 2))
                RELEASE_NOTES=$(sed -n "${CONTENT_START},${SECTION_END}p" "$CHANGELOG_FILE" | head -n 50)
              fi
            fi
          fi

          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"

          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release ${{ env.VERSION }}"
          tag_name: "${{ env.TAG }}"
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(env.TAG, '-alpha') || contains(env.TAG, '-beta') || contains(env.TAG, '-rc') }}
          files: |
            release-files/*