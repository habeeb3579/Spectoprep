name: üìö Issue Management

on:
  issues:
    types: [opened, labeled, unlabeled, reopened]
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC to run stale issues check

env:
  PROJECT_ID: 'PVT_kwHOA2jIe84A4Aeo'        # e.g., 'PN_kwDOABCDE12345'
  STATUS_FIELD_ID: 'PVTSSF_lAHOA2jIe84A4AeozgtDFjk' # e.g., 'PVTSSF_lAHOA2jIe84A4AeozgtDFjk'
  TODO_OPTION_ID: 'f75ad846' # e.g., 'f75ad846'
  ASSIGNEE_FIELD_ID: 'PVTF_lAHOA2jIe84A4AeozgtDFjg' # optional
  ASSIGNEE_NODE_ID: 'MDQ6VXNlcjU3MTk4NzE1' # optional (your GitHub user Node ID)

jobs:
  first-response:
    name: üìù First Response
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Comment on new issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üëã Thanks for reporting this issue! We will look into it soon.'
            });

  triage-issue:
    name: üè∑Ô∏è Triage New Issue
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add triage label if missing
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!context.payload.issue.labels.some(label => label.name === 'triage')) {
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['triage']
              });
            }

  assign-to-project:
    name: üìã Assign Issue to Project
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'labeled')
    steps:
      - name: Add issue to project and set fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            // Add Issue to Project
            const addToProject = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `;

            let itemId;
            try {
              const response = await github.graphql(addToProject, {
                projectId: process.env.PROJECT_ID,
                contentId: context.payload.issue.node_id,
              });
              itemId = response.addProjectV2ItemById.item.id;
              console.log('‚úÖ Issue added to project:', itemId);
            } catch (error) {
              console.error('‚ùå Error adding to project:', error);
              throw error;
            }

            // Set Status to "Todo"
            const updateStatus = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `;
            try {
              await github.graphql(updateStatus, {
                projectId: process.env.PROJECT_ID,
                itemId: itemId,
                fieldId: process.env.STATUS_FIELD_ID,
                optionId: process.env.TODO_OPTION_ID,
              });
              console.log('‚úÖ Status set to Todo');
            } catch (error) {
              console.error('‚ùå Error setting status:', error);
              throw error;
            }

            // (Optional) Assign Issue to yourself
            /*
            const updateAssignee = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $assigneeId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { assigneeIds: [$assigneeId] }
                }) {
                  projectV2Item { id }
                }
              }
            `;
            try {
              await github.graphql(updateAssignee, {
                projectId: process.env.PROJECT_ID,
                itemId: itemId,
                fieldId: process.env.ASSIGNEE_FIELD_ID,
                assigneeId: process.env.ASSIGNEE_NODE_ID,
              });
              console.log('‚úÖ Assignee set.');
            } catch (error) {
              console.error('‚ùå Error setting assignee:', error);
            }
            */

  stale-issues:
    name: üí§ Mark Stale Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/stale@v9
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: '‚ö†Ô∏è This issue has been marked as stale due to inactivity for 30 days. It will be closed in 7 days if no further activity occurs.'
          close-issue-message: 'üö´ This issue has been closed due to inactivity. Feel free to reopen if this is still relevant.'
          stale-issue-label: 'stale'
          days-before-stale: 30
          days-before-close: 7
          exempt-issue-labels: 'bug,enhancement,security,documentation'