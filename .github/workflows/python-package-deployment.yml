name: ðŸ“¦ Python Package Deployment

permissions:
  contents: write
  packages: write
  id-token: write

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      publish_targets:
        description: 'Targets to publish to'
        required: true
        default: 'pypi'
        type: choice
        options:
          - pypi
          - conda
          - both

jobs:

  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20  # Add timeout to prevent stuck jobs
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false  # Continue with other matrix jobs if one fails
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install project with dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov mypy coverage
          pip install -e ".[dev]"

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type check with mypy
        run: |
          mypy src/ tests/
        continue-on-error: true

      - name: Test with pytest
        run: |
          pytest tests/ --cov=src --cov-report=xml
        # Add test timeout to avoid hanging tests
        timeout-minutes: 10

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  test-conda:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.11"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          activate-environment: test-env
          auto-activate-base: false
          channels: conda-forge,defaults

      - name: Install dependencies
        shell: bash -el {0}
        run: |
          conda install -y pytest pytest-cov flake8
          if [ -f environment.yml ]; then
            conda env update --file environment.yml
          elif [ -f requirements.txt ]; then 
            conda install -y --file requirements.txt
          fi
          pip install -e .
        # Add timeout to prevent stalled installations
        timeout-minutes: 10

      - name: Test with pytest
        shell: bash -el {0}
        run: |
          pytest tests/
        timeout-minutes: 10

  build-pypi:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  build-conda:
    needs: test-conda
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # First, check if conda-recipe is in the current location or .github/workflow
      - name: Check conda-recipe location and copy if needed
        run: |
          if [ -d ".github/workflow/conda-recipe" ]; then
            echo "Found conda-recipe in .github/workflow, copying to root..."
            mkdir -p conda-recipe
            cp -r .github/workflow/conda-recipe/* conda-recipe/
          elif [ -d ".github/workflows/conda-recipe" ]; then
            echo "Found conda-recipe in .github/workflows, copying to root..."
            mkdir -p conda-recipe
            cp -r .github/workflows/conda-recipe/* conda-recipe/
          fi
          
          if [ ! -d "conda-recipe" ]; then
            echo "Error: conda-recipe directory not found"
            exit 1
          fi
          
          if [ ! -f "conda-recipe/meta.yaml" ]; then
            echo "Error: conda-recipe/meta.yaml file not found"
            exit 1
          fi

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.11"
          activate-environment: build-env
          auto-activate-base: false
          channels: conda-forge,defaults

      - name: Install conda-build and debug dependencies
        shell: bash -el {0}
        run: |
          conda install -y conda-build anaconda-client conda-verify
          conda config --show-sources
          conda config --show channels
          conda info

      # Check available packages to verify channel configuration
      - name: Check if bayesian-optimization exists in available channels
        shell: bash -el {0}
        run: |
          conda search bayesian-optimization
          # Add conda-forge explicitly
          conda config --add channels conda-forge
          conda search bayesian-optimization

      - name: Build conda package
        shell: bash -el {0}
        run: |
          mkdir -p conda-bld
          # Print meta.yaml for debugging
          echo "Contents of meta.yaml:"
          cat conda-recipe/meta.yaml
          # Build the package with conda-forge channel
          conda build conda-recipe --output-folder conda-bld --no-anaconda-upload --channel conda-forge

      - name: Upload conda build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: conda-package-distributions
          path: conda-bld/
          retention-days: 7

  publish-test-pypi:
    needs: build-pypi
    if: github.ref != 'refs/tags/v*' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    environment:
      name: staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # List the files for debugging
      - name: List distribution files
        run: ls -la dist/

      # Set up Python and twine
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      # Check package with twine
      - name: Check distributions
        run: |
          twine check dist/*
          
      # Publish to TestPyPI using twine with username/password
      - name: Publish to TestPyPI
        run: |
          twine upload --repository testpypi dist/* --verbose --skip-existing
        env:
          TWINE_USERNAME: ${{ secrets.TEST_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PASSWORD }}

  publish-pypi:
    needs: build-pypi
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      # List the files for debugging
      - name: List distribution files
        run: ls -la dist/

      # Set up Python and twine
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Install twine
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      # Check package with twine
      - name: Check distributions
        run: |
          twine check dist/*
          
      # Publish to PyPI using twine with username/password
      - name: Publish to PyPI
        run: |
          twine upload dist/* --verbose
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

  publish-conda:
    needs: build-conda
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: conda-package-distributions
          path: conda-bld/

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.11"
          activate-environment: publish-env
          auto-activate-base: false
          channels: conda-forge,defaults

      - name: Install anaconda-client
        shell: bash -el {0}
        run: |
          conda install -y anaconda-client

      - name: Upload to Anaconda.org
        shell: bash -el {0}
        run: |
          anaconda -t ${{ secrets.ANACONDA_TOKEN }} upload --force conda-bld/*/*.tar.bz2

  # Optional: Only if you want to publish to GitHub Pages in addition to ReadTheDocs
  deploy-sphinx-docs:
    needs: [build-pypi]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]" || pip install -e .
          pip install -r docs/requirements.txt
          pip list

      - name: Build Sphinx documentation
        run: |
          cd docs
          make clean
          make html
          touch _build/html/.nojekyll  # Prevent Jekyll processing on GitHub Pages

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html