name: ðŸ”– Version Tagging

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version increment'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Prerelease suffix (leave empty for stable release)'
        required: false
        default: ''
        type: string

# Required for creating PRs
permissions:
  contents: write
  pull-requests: write

jobs:
  tag-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      tag_name: ${{ steps.bump_version.outputs.tag_name }}
      current_version: ${{ steps.get_version.outputs.current_version }}
      pr_number: ${{ steps.create_pr.outputs.pull-request-number }}
      conda_version: ${{ steps.bump_version.outputs.conda_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep -oP "__version__ = ['\"]\K[^'\"]+" src/spectoprep/__init__.py)
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        env:
          CURRENT_VERSION: ${{ steps.get_version.outputs.current_version }}
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"

          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          if [ ! -z "$PRERELEASE" ]; then
            NEW_VERSION="${NEW_VERSION}-${PRERELEASE}"
            # Create conda-compatible version for prerelease
            # Replace '-' with '.' for conda compatibility
            CONDA_VERSION="${MAJOR}.${MINOR}.${PATCH}.${PRERELEASE}"
          else
            CONDA_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi

          # Update version in Python file
          sed -i "s/__version__ = ['\"][^'\"]*['\"]/__version__ = \"$NEW_VERSION\"/" src/spectoprep/__init__.py
          
          # Update version in pyproject.toml
          sed -i "s/version = ['\"][^'\"]*['\"]/version = \"$NEW_VERSION\"/" pyproject.toml

          # Check if conda-recipe/meta.yaml exists and update version there
          if [ -f "conda-recipe/meta.yaml" ]; then
            sed -i "s/{% set version = \".*\" %}/{% set version = \"$CONDA_VERSION\" %}/" conda-recipe/meta.yaml
          fi

          echo "New version: $NEW_VERSION"
          echo "Conda version: $CONDA_VERSION"
          TAG_NAME="v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "conda_version=$CONDA_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PROJECT_TOKEN }}
          commit-message: "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          title: "Version bump to ${{ steps.bump_version.outputs.new_version }}"
          body: |
            This PR bumps the version from ${{ steps.get_version.outputs.current_version }} to ${{ steps.bump_version.outputs.new_version }}.
            
            Conda package version: ${{ steps.bump_version.outputs.conda_version }}

            Once merged, a tag will be created and a release will be published.
            
            **IMPORTANT:** Please review and merge this PR manually. Do not use auto-merge.
          branch: version-bump-${{ steps.bump_version.outputs.new_version }}
          base: ${{ github.event.repository.default_branch }}
          labels: version-bump
          draft: false
          delete-branch: false

      - name: Output PR Details
        if: steps.create_pr.outputs.pull-request-number
        run: |
          echo "Created PR #${{ steps.create_pr.outputs.pull-request-number }}"
          echo "PR URL: ${{ steps.create_pr.outputs.pull-request-url }}"