name: ðŸ”– Version Tagging

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version increment'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Prerelease suffix (leave empty for stable release)'
        required: false
        default: ''
        type: string

jobs:
  tag-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      tag_name: ${{ steps.bump_version.outputs.tag_name }}
      current_version: ${{ steps.get_version.outputs.current_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep -oP "__version__ = ['\"]\K[^'\"]+" src/spectoprep/__init__.py)
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        env:
          CURRENT_VERSION: ${{ steps.get_version.outputs.current_version }}
        run: |
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"

          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          if [ "$VERSION_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          if [ ! -z "$PRERELEASE" ]; then
            NEW_VERSION="${NEW_VERSION}-${PRERELEASE}"
          fi

          sed -i "s/__version__ = ['\"][^'\"]*['\"]/__version__ = \"$NEW_VERSION\"/" src/spectoprep/__init__.py
          sed -i "s/version = ['\"][^'\"]*['\"]/version = \"$NEW_VERSION\"/" pyproject.toml

          echo "New version: $NEW_VERSION"
          TAG_NAME="v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Commit and push version bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-${{ steps.bump_version.outputs.new_version }}
          git add src/spectoprep/__init__.py pyproject.toml
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push origin version-bump-${{ steps.bump_version.outputs.new_version }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          title: "Version bump to ${{ steps.bump_version.outputs.new_version }}"
          body: |
            This PR bumps the version from ${{ steps.get_version.outputs.current_version }} to ${{ steps.bump_version.outputs.new_version }}.
            
            Once merged, a tag will be created and a release will be published.
          branch: version-bump-${{ steps.bump_version.outputs.new_version }}
          base: ${{ github.event.repository.default_branch }}
          labels: version-bump

# The create-tag job has been removed